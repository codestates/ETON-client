[{"/home/ddubbu/git/ETON/1. ETON-client/src/index.js":"1","/home/ddubbu/git/ETON/1. ETON-client/src/reportWebVitals.js":"2","/home/ddubbu/git/ETON/1. ETON-client/src/App.js":"3","/home/ddubbu/git/ETON/1. ETON-client/src/pages/SignIn.js":"4","/home/ddubbu/git/ETON/1. ETON-client/src/pages/Intro.js":"5","/home/ddubbu/git/ETON/1. ETON-client/src/pages/SignUp.js":"6","/home/ddubbu/git/ETON/1. ETON-client/src/components/common/Header.js":"7","/home/ddubbu/git/ETON/1. ETON-client/src/components/common/Logo.js":"8"},{"size":594,"mtime":1612438284256,"results":"9","hashOfConfig":"10"},{"size":362,"mtime":1612316892328,"results":"11","hashOfConfig":"10"},{"size":721,"mtime":1612438284256,"results":"12","hashOfConfig":"10"},{"size":957,"mtime":1612444658543,"results":"13","hashOfConfig":"10"},{"size":1952,"mtime":1612447069101,"results":"14","hashOfConfig":"10"},{"size":17462,"mtime":1612444141986,"results":"15","hashOfConfig":"10"},{"size":643,"mtime":1612447208349,"results":"16","hashOfConfig":"10"},{"size":272,"mtime":1612446543658,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"re4l63",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"20"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"28","messages":"29","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"30","messages":"31","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"20"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/ddubbu/git/ETON/1. ETON-client/src/index.js",[],["37","38"],"/home/ddubbu/git/ETON/1. ETON-client/src/reportWebVitals.js",[],"/home/ddubbu/git/ETON/1. ETON-client/src/App.js",["39","40","41"],"import React, { useState } from 'react';\nimport Intro from './pages/Intro';\nimport './styles/common.css';\nimport Header from './components/common/Header';\nimport { Route, Link, Switch } from 'react-router-dom';\nimport SignUp from './pages/SignUp';\nimport SignIn from './pages/SignIn';\n\nfunction App() {\n  \n  const [isLogin, setLogin] = useState(false);\n\n  return (\n    <div className=\"App\">\n      <Header/>\n      <div className=\"body\">\n        {/* <Intro /> */}\n        <Route exact path=\"/\" component={Intro}/>\n\n        <Switch>\n          <Route path=\"/users/signin\" component={SignIn} />\n          <Route path=\"/users/signup\" component={SignUp} />\n        </Switch>\n\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","/home/ddubbu/git/ETON/1. ETON-client/src/pages/SignIn.js",["42"],"/home/ddubbu/git/ETON/1. ETON-client/src/pages/Intro.js",["43","44"],"/home/ddubbu/git/ETON/1. ETON-client/src/pages/SignUp.js",["45","46","47","48","49","50","51","52"],"import React, { useEffect, useState } from \"react\";\nimport \"../styles/signUp.css\";\nimport axios from \"axios\";\n\nconst SignUp = () => {\n  const [email, setEmail] = useState(\"\");\n  const [name, setName] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [passwordCheck, setPasswordCheck] = useState(\"\");\n\n  const [validEmail, setValidEmail] = useState(true);\n  const [validName, setValidName] = useState(true);\n  const [validPassword, setValidPassword] = useState(true);\n  const [validPasswordCheck, setValidPasswordCheck] = useState(true);\n\n  const [gitHubAccessToken, setGitHubAccessToken] = useState(\"\");\n\n  // 에러종류#############################\n\n  //eamil\n  const [emailLengthCheck, setEmailLengthCheck] = useState(true); //길이\n  const [emailScriptCheck, setEmailScriptCheck] = useState(true); //스크립트 체크\n  const [emailFormCheck, setEmailFormCheck] = useState(true);\n  const [doEmailDuplicateCheck, setDoEmailDuplicateCheck] = useState(false); //이메일 중복체크 했는지\n  const [emailDuplicateCheck, setEmailDuplicateCheck] = useState(true); //이메일 중복체크\n\n  //name\n  const [nameLengthCheck, setNameLengthCheck] = useState(true); //길이\n  const [nameScriptCheck, setNameScriptCheck] = useState(true); //스크립트 체크\n\n  //비밀번호\n  const [passwordLengthCheck, setPasswordLengthCheck] = useState(true); //길이\n  const [passwordRegCheck, setPasswordRegCheck] = useState(true); //8글자이상, 하나이상의 숫자, 하나이상의 문자, 하나이상의 특수문자 들어갔는지\n\n  //비밀번호 체크\n  const [samePasswordCheck, setSamePasswordCheck] = useState(true); //비밀번호와 같은지\n  const [passwordCheckLengthCheck, setPasswordCheckLengthCheck] = useState(\n    true\n  ); //비밀번호체크 한글자이상은 입력해야함.\n\n  //메소드\n  const handleEmail = (e) => {\n    setEmail(e.target.value);\n\n    //길이체크\n    checkEmailLength(e.target.value.length);\n    //스크립트 체크\n    checkEmailScript(e.target.value);\n\n    //이메일 형식 체크\n    checkEmailForm(e.target.value);\n\n    //이메일 중복 체크\n    // checkEmailDuplicate(e.target.value);\n\n    //전체 밸리드 인지\n    // if(emailLengthCheck && emailScriptCheck && emailFormCheck){\n    //     setValidEmail(true);\n    // }else{\n    //     setValidEmail(false);\n    // }\n\n    //리액트 훅스 스테이트가 바로 반영이 안되는 것 같아서 위의 주석처리된 메서드를 이렇게 바꿈. 나중에 스테이트를 쓸 수 있는 방향으로\n    //리팩토링 할 수 있으면 리팩토링 ㄱㄱ. 밑에 메서드들도 전부 마찬가지.\n    if (\n      checkEmailLength(e.target.value.length) &&\n      checkEmailScript(e.target.value) &&\n      checkEmailForm(e.target.value)\n    ) {\n      setValidEmail(true);\n    } else {\n      setValidEmail(false);\n    }\n  };\n\n  const handleName = (e) => {\n    setName(e.target.value);\n\n    checkNameLength(e.target.value.length);\n\n    checkNameScript(e.target.value);\n\n    if (\n      checkNameLength(e.target.value.length) &&\n      checkNameScript(e.target.value)\n    ) {\n      setValidName(true);\n    } else {\n      setValidName(false);\n    }\n  };\n\n  const handlePassword = (e) => {\n    setPassword(e.target.value);\n\n    checkPasswordLength(e.target.value.length);\n\n    checkPasswordReg(e.target.value);\n\n    if (\n      checkPasswordLength(e.target.value.length) &&\n      checkPasswordReg(e.target.value)\n    ) {\n      setValidPassword(true);\n    } else {\n      setValidPassword(false);\n    }\n\n    //비밀번호 체크를 먼저 입력하고 비밀번호를 입력할 경우, 같은지 아닌지를 체크해줘야 한다.\n    checkSamePassword(e.target.value, passwordCheck);\n\n    if (\n      checkSamePassword(e.target.value, passwordCheck) &&\n      checkPasswordCheckLength(e.target.value.length)\n    ) {\n      setValidPasswordCheck(true);\n    } else {\n      setValidPasswordCheck(false);\n    }\n  };\n\n  const handlePasswordCheck = (e) => {\n    setPasswordCheck(e.target.value);\n\n    checkSamePassword(e.target.value, password);\n\n    checkPasswordCheckLength(e.target.value.length);\n\n    if (\n      checkSamePassword(e.target.value, password) &&\n      checkPasswordCheckLength(e.target.value.length)\n    ) {\n      setValidPasswordCheck(true);\n    } else {\n      setValidPasswordCheck(false);\n    }\n  };\n\n  ///////////////////////////////// 공통메서드\n  const lengthInvalidCheck = (target, min, max) => {\n    if (target < min || target > max) {\n      return false;\n    }\n    return true;\n  };\n\n  const regCheck = (target, reg) => {\n    if (reg.test(target)) {\n      return true;\n    } else {\n      return false;\n    }\n  };\n  ////////////////////////////////개별 유효성 검사\n  const checkEmailLength = (target) => {\n    if (lengthInvalidCheck(target, 5, 20)) {\n      setEmailLengthCheck(true);\n      return true;\n    } else {\n      setEmailLengthCheck(false);\n      return false;\n    }\n  };\n\n  const checkEmailScript = (target) => {\n    const scriptCheck = /<(|\\/|[^\\/>][^>]+|\\/[^>][^>]+)>/;\n    if (!regCheck(target, scriptCheck)) {\n      setEmailScriptCheck(true);\n      return true;\n    } else {\n      setEmailScriptCheck(false);\n      return false;\n    }\n  };\n\n  const checkEmailForm = (target) => {\n    const emailCheck = /(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|\"(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*\")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21-\\x5a\\x53-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])+)\\])/;\n    if (regCheck(target, emailCheck)) {\n      setEmailFormCheck(true);\n      return true;\n    } else {\n      setEmailFormCheck(false);\n      return false;\n    }\n  };\n\n  const checkEmailDuplicate = (data) => {\n    if (\n      checkEmailLength(email) &&\n      checkEmailForm(email) &&\n      checkEmailScript(email)\n    ) {\n      setDoEmailDuplicateCheck(true);\n      axios\n        .post(\"http://localhost:5000/users/signup/email\", {\n          email,\n        })\n        .then((res) => {\n          console.log(\"정상\");\n          setEmailDuplicateCheck(true);\n\n          return true;\n        })\n        .catch((err) => {\n          console.log(\"에러\");\n          setEmailDuplicateCheck(false);\n          return false;\n        });\n    } else {\n      alert(\"이메일 형식을 맞춰주세요\");\n      setValidEmail(false);\n    }\n  };\n\n  const checkNameLength = (target) => {\n    if (lengthInvalidCheck(target, 2, 20)) {\n      setNameLengthCheck(true);\n      return true;\n    } else {\n      setNameLengthCheck(false);\n      return false;\n    }\n  };\n\n  const checkNameScript = (target) => {\n    const scriptCheck = /<(|\\/|[^\\/>][^>]+|\\/[^>][^>]+)>/;\n    if (!regCheck(target, scriptCheck)) {\n      setNameScriptCheck(true);\n      return true;\n    } else {\n      setNameScriptCheck(false);\n      return false;\n    }\n  };\n\n  const checkPasswordLength = (target) => {\n    if (lengthInvalidCheck(target, 8, 20)) {\n      setPasswordLengthCheck(true);\n      return true;\n    } else {\n      setPasswordLengthCheck(false);\n      return false;\n    }\n  };\n\n  const checkPasswordReg = (target) => {\n    const passRegex = /^(?=.*[A-Za-z])(?=.*\\d)(?=.*[$@$!%*#?&])[A-Za-z\\d$@$!%*#?&]{8,}$/; //8글자이상, 하나이상의 숫자, 하나이상의 문자, 하나이상의 특수문자 들어갔는지\n    if (regCheck(target, passRegex)) {\n      setPasswordRegCheck(true);\n      return true;\n    } else {\n      setPasswordRegCheck(false);\n      return false;\n    }\n  };\n\n  const checkSamePassword = (source, target) => {\n    if (source === target) {\n      setSamePasswordCheck(true);\n      return true;\n    } else {\n      setSamePasswordCheck(false);\n      return false;\n    }\n  };\n\n  const checkPasswordCheckLength = (target) => {\n    if (target >= 1) {\n      setPasswordCheckLengthCheck(true);\n      return true;\n    } else {\n      setPasswordCheckLengthCheck(false);\n      return false;\n    }\n  };\n\n  ///////////////전체 유효성 검사\n  const checkValidEmail = () => {\n    // if(checkEmailLength(email.length) && checkEmailScript(email) && checkEmailForm(email)){\n    //     setValidEmail(true);\n    // }else{\n    //     setValidEmail(false);\n    // }\n\n    //서브밋버튼을 눌렀을 때 모든 에러메세지를 보여주고 싶어서 아래와 같이 함. 나중에 리팩토링 할수 있으면 리팩토링. 밑의 메서드들도 다 마찬가지.\n    let flag = true;\n    if (checkEmailLength(email.length)) {\n      flag = flag && true;\n    } else {\n      flag = flag && false;\n    }\n\n    if (checkEmailScript(email)) {\n      flag = flag && true;\n    } else {\n      flag = flag && false;\n    }\n\n    if (checkEmailForm(email)) {\n      flag = flag && true;\n    } else {\n      flag = flag && false;\n    }\n\n    // flag = checkEmailDuplicate(email) ? flag = flag&&true : flag = flag&&false;\n    if (doEmailDuplicateCheck) {\n      flag = emailDuplicateCheck\n        ? (flag = flag && true)\n        : (flag = flag && false);\n      // flag = checkEmailDuplicate(email) ? flag = flag&&true : flag = flag&&false; //이렇게 하면 제대로 작동 안된다. 비동기 때문인듯\n    } else {\n      alert(\"이메일 중복확인을 해주세요\");\n      flag = flag && false;\n    }\n\n    if (flag) {\n      setValidEmail(true);\n      return true;\n    } else {\n      setValidEmail(false);\n      return false;\n    }\n  };\n\n  const checkValidName = () => {\n    let flag = true;\n\n    if (checkNameLength(name.length)) {\n      flag = flag && true;\n    } else {\n      flag = flag && false;\n    }\n\n    if (checkNameScript(name)) {\n      flag = flag && true;\n    } else {\n      flag = flag && false;\n    }\n\n    if (flag) {\n      setValidName(true);\n    } else {\n      setValidName(false);\n    }\n  };\n\n  const checkValidPassword = () => {\n    let flag = true;\n    flag = checkPasswordLength(password.length) ? flag && true : flag && false;\n    flag = checkPasswordReg(password) ? flag && true : flag && false;\n\n    if (flag) {\n      setValidPassword(true);\n    } else {\n      setValidPassword(false);\n    }\n  };\n\n  const checkValidPasswordCheck = () => {\n    let flag = true;\n    flag = checkSamePassword(password, passwordCheck)\n      ? flag && true\n      : flag && false;\n    flag = checkPasswordCheckLength(passwordCheck.length)\n      ? flag && true\n      : flag && false;\n\n    if (flag) {\n      setValidPasswordCheck(true);\n    } else {\n      setValidPasswordCheck(false);\n    }\n  };\n\n  const submit = () => {\n    checkValidEmail();\n    checkValidName();\n    checkValidPassword();\n    checkValidPasswordCheck();\n\n    if (validEmail && validName && validPassword && validPasswordCheck) {\n      //제출\n    } else {\n    }\n  };\n\n  //social sign up\n  const socialSignUp = (e) => {\n    let ClientId = \"b7cf6608d7fdc7e57bce\";\n    let clientPassword = \"c428aa7b086397ccbaac51f003ca76121463b198\";\n\n    if (e.target.textContent.includes(\"GitHub\")) {\n      window.location.assign(\n        \"https://github.com/login/oauth/authorize?client_id=b7cf6608d7fdc7e57bce\"\n      );\n    }\n  };\n\n  useEffect(() => {\n    console.log(\"use Effect\");\n    const url = new URL(window.location.href);\n    const authorizationCode = url.searchParams.get(\"code\");\n    if (authorizationCode) {\n      getAccessToken(authorizationCode);\n    }\n  });\n\n  const getAccessToken = (authorizationCode) => {\n    console.log(\"getAccessToken!\");\n    axios.post(\n      \"http://localhost:5000/users/signup/oauth\",\n      {\n        authorizationCode,\n      },\n      {\n        withCredentials: true,\n      }\n    );\n    //여기서 서버로 인증코드 (authorizationCode)를 보내주면 서버에서 액세스 토큰을 요청하고, 액세스 토큰을 클라이언트로 바로 반환해 주는 것이 아니라 받은 액세스 토큰을 가지고\n    //다시 깃헙 사이트에 요청을 해서 정보를 받아온다. 그리고 받은 정보를 바탕으로 회원가입을 시킨다.(데이터베이스에 정보를 넣는다).\n    //여기까지 성공적으로 진행되었다면 성공적으로 잘 됬다는 리스폰스를 보내준다. 그리고 클라이언트는 인트로 페이지로.\n  };\n\n  return (\n    <div className=\"signUpContainer\">\n      <div className=\"signUpDiv\">\n        LOGO\n        <br />\n        SignUp\n        {/* <div className = \"socialLoginDiv\">\n                    <button onClick = {socialSignUp}>GitHub</button>\n                </div> */}\n        <div className={`email inputDiv ${validEmail ? \"\" : \"validError\"}`}>\n          <div className=\"inputSection\">\n            <span className=\"item\">Email</span>\n\n            <input\n              type=\"text\"\n              className=\"emailInput\"\n              onChange={handleEmail}\n              value={email}\n            />\n            <div className=\"duplicateCheck\">\n              <button onClick={checkEmailDuplicate}>중복확인</button>\n              {doEmailDuplicateCheck\n                ? emailDuplicateCheck\n                  ? \"✔️사용가능한 이메일입니다\"\n                  : \"✔️중복된이메일입니다\"\n                : \"\"}\n            </div>\n          </div>\n          <div className=\"errorSection\">\n            <div\n              className={`errorMessage ${\n                emailLengthCheck ? \"inactiveErrorMessage\" : \"activeErrorMessage\"\n              }`}\n            >\n              ✔️5글자 이상, 20글자 이하로 해주세요.\n            </div>\n            <div\n              className={`errorMessage ${\n                emailFormCheck ? \"inactiveErrorMessage\" : \"activeErrorMessage\"\n              }`}\n            >\n              ✔️이메일 형식에 맞게 써주세요\n            </div>\n            {/* <div className = {`errorMessage ${emailDuplicateCheck ? 'inactiveErrorMessage' : 'activeErrorMessage'}`}>✔️중복된 이메일 입니다</div> */}\n            <div\n              className={`errorMessage ${\n                emailScriptCheck ? \"inactiveErrorMessage\" : \"activeErrorMessage\"\n              }`}\n            >\n              ✔️스크립트 쓰지 마세요🤖\n            </div>\n          </div>\n        </div>\n        <div className={`name inputDiv ${validName ? \"\" : \"validError\"}`}>\n          <div className=\"inputSection\">\n            <span className=\"item\">Name</span>\n            <input\n              type=\"text\"\n              className=\"nameInput\"\n              onChange={handleName}\n              value={name}\n            />\n          </div>\n          <div className=\"errorSection\">\n            <div\n              className={`errorMessage ${\n                nameLengthCheck ? \"inactiveErrorMessage\" : \"activeErrorMessage\"\n              }`}\n            >\n              ✔️2글자 이상, 20글자 이하로 해주세요\n            </div>\n            <div\n              className={`errorMessage ${\n                nameScriptCheck ? \"inactiveErrorMessage\" : \"activeErrorMessage\"\n              }`}\n            >\n              스크립트 쓰지 마세요🤖\n            </div>\n          </div>\n        </div>\n        <div\n          className={`password inputDiv ${validPassword ? \"\" : \"validError\"}`}\n        >\n          <div className=\"inputSection\">\n            <span className=\"item\">Password</span>\n            <input\n              type=\"password\"\n              className=\"passwordInput\"\n              onChange={handlePassword}\n              value={password}\n            />\n          </div>\n          <div className=\"errorSection\">\n            <div\n              className={`errorMessage ${\n                passwordLengthCheck\n                  ? \"inactiveErrorMessage\"\n                  : \"activeErrorMessage\"\n              }`}\n            >\n              ✔️8글자 이상, 20글자 이하로 해주세요\n            </div>\n            <div\n              className={`errorMessage ${\n                passwordRegCheck ? \"inactiveErrorMessage\" : \"activeErrorMessage\"\n              }`}\n            >\n              ✔️문자, 숫자, 특수문자가 각각 하나이상 들어가야 합니다.\n            </div>\n          </div>\n        </div>\n        <div\n          className={`passwordCheck inputDiv ${\n            validPasswordCheck ? \"\" : \"validError\"\n          }`}\n        >\n          <div className=\"inputSection\">\n            <span className=\"item\">Password Check</span>\n            <input\n              type=\"password\"\n              className=\"passwordCheckInput\"\n              onChange={handlePasswordCheck}\n              value={passwordCheck}\n            />\n          </div>\n          <div className=\"errorSection\">\n            <div\n              className={`errorMessage ${\n                samePasswordCheck\n                  ? \"inactiveErrorMessage\"\n                  : \"activeErrorMessage\"\n              }`}\n            >\n              같은 비밀번호를 써주세요\n            </div>\n            <div\n              className={`errorMessage ${\n                passwordCheckLengthCheck\n                  ? \"inactiveErrorMessage\"\n                  : \"activeErrorMessage\"\n              }`}\n            >\n              입력해주세요\n            </div>\n          </div>\n        </div>\n        <div className=\"submitButtonDiv\">\n          <button className=\"submitButton\" onClick={submit}>\n            Sign Up\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default SignUp;\n","/home/ddubbu/git/ETON/1. ETON-client/src/components/common/Header.js",["53"],"/home/ddubbu/git/ETON/1. ETON-client/src/components/common/Logo.js",["54"],{"ruleId":"55","replacedBy":"56"},{"ruleId":"57","replacedBy":"58"},{"ruleId":"59","severity":1,"message":"60","line":5,"column":17,"nodeType":"61","messageId":"62","endLine":5,"endColumn":21},{"ruleId":"59","severity":1,"message":"63","line":11,"column":10,"nodeType":"61","messageId":"62","endLine":11,"endColumn":17},{"ruleId":"59","severity":1,"message":"64","line":11,"column":19,"nodeType":"61","messageId":"62","endLine":11,"endColumn":27},{"ruleId":"65","severity":1,"message":"66","line":13,"column":10,"nodeType":"67","messageId":"68","endLine":13,"endColumn":11,"fix":"69"},{"ruleId":"59","severity":1,"message":"70","line":1,"column":17,"nodeType":"61","messageId":"62","endLine":1,"endColumn":25},{"ruleId":"71","severity":1,"message":"72","line":51,"column":27,"nodeType":"73","endLine":51,"endColumn":68},{"ruleId":"59","severity":1,"message":"74","line":16,"column":10,"nodeType":"61","messageId":"62","endLine":16,"endColumn":27},{"ruleId":"59","severity":1,"message":"75","line":16,"column":29,"nodeType":"61","messageId":"62","endLine":16,"endColumn":49},{"ruleId":"76","severity":1,"message":"77","line":166,"column":34,"nodeType":"78","messageId":"79","endLine":166,"endColumn":35,"suggestions":"80"},{"ruleId":"81","severity":1,"message":"82","line":177,"column":24,"nodeType":"78","messageId":"83","endLine":177,"endColumn":452},{"ruleId":"76","severity":1,"message":"77","line":226,"column":34,"nodeType":"78","messageId":"79","endLine":226,"endColumn":35,"suggestions":"84"},{"ruleId":"59","severity":1,"message":"85","line":388,"column":9,"nodeType":"61","messageId":"62","endLine":388,"endColumn":21},{"ruleId":"59","severity":1,"message":"86","line":389,"column":9,"nodeType":"61","messageId":"62","endLine":389,"endColumn":17},{"ruleId":"59","severity":1,"message":"87","line":390,"column":9,"nodeType":"61","messageId":"62","endLine":390,"endColumn":23},{"ruleId":"59","severity":1,"message":"60","line":2,"column":10,"nodeType":"61","messageId":"62","endLine":2,"endColumn":14},{"ruleId":"71","severity":1,"message":"72","line":8,"column":9,"nodeType":"73","endLine":8,"endColumn":41},"no-native-reassign",["88"],"no-negated-in-lhs",["89"],"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","'isLogin' is assigned a value but never used.","'setLogin' is assigned a value but never used.","rest-spread-spacing","Unexpected whitespace after spread property operator.","ExperimentalSpreadProperty","unexpectedWhitespace",{"range":"90","text":"91"},"'useState' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'gitHubAccessToken' is assigned a value but never used.","'setGitHubAccessToken' is assigned a value but never used.","no-useless-escape","Unnecessary escape character: \\/.","Literal","unnecessaryEscape",["92","93"],"no-control-regex","Unexpected control character(s) in regular expression: \\x01, \\x08, \\x0b, \\x0c, \\x0e, \\x1f, \\x01, \\x09, \\x0b, \\x0c, \\x0e, \\x01, \\x08, \\x0b, \\x0c, \\x0e, \\x1f, \\x01, \\x09, \\x0b, \\x0c, \\x0e.","unexpected",["94","95"],"'socialSignUp' is assigned a value but never used.","'ClientId' is assigned a value but never used.","'clientPassword' is assigned a value but never used.","no-global-assign","no-unsafe-negation",[279,280],"",{"messageId":"96","fix":"97","desc":"98"},{"messageId":"99","fix":"100","desc":"101"},{"messageId":"96","fix":"102","desc":"98"},{"messageId":"99","fix":"103","desc":"101"},"removeEscape",{"range":"104","text":"91"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"105","text":"106"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"107","text":"91"},{"range":"108","text":"106"},[4491,4492],[4491,4491],"\\",[6271,6272],[6271,6271]]